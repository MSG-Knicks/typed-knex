"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrimaryKeyColumn =
    exports.getColumnProperties =
    exports.getColumnInformation =
    exports.Column =
    exports.getColumnName =
    exports.getTableName =
    exports.getTableMetadata =
    exports.Entity =
    exports.Table =
    exports.getTables =
    exports.getEntities =
        void 0;
require("reflect-metadata");
const tables = [];
/**
 * @deprecated use `getTables`.
 */
function getEntities() {
    return tables;
}
exports.getEntities = getEntities;
function getTables() {
    return tables;
}
exports.getTables = getTables;
function Table(tableName) {
    return (target) => {
        target.prototype.tableMetadataKey = Symbol("table");
        Reflect.metadata(target.prototype.tableMetadataKey, { tableName: tableName !== null && tableName !== void 0 ? tableName : target.name })(target);
        tables.push({ tableName: tableName !== null && tableName !== void 0 ? tableName : target.name, tableClass: target });
    };
}
exports.Table = Table;
/**
 * @deprecated use `Table`.
 */
exports.Entity = Table;
function getTableMetadata(tableClass) {
    return Reflect.getMetadata(tableClass.prototype.tableMetadataKey, tableClass);
}
exports.getTableMetadata = getTableMetadata;
function getTableName(tableClass) {
    return getTableMetadata(tableClass).tableName;
}
exports.getTableName = getTableName;
function getColumnName(tableClass, propertyName) {
    return getColumnInformation(tableClass, propertyName).name;
}
exports.getColumnName = getColumnName;
const columnMetadataKey = Symbol("column");
function Column(options) {
    return getRegisterColumn(options);
}
exports.Column = Column;
function getRegisterColumn(options) {
    function registerColumn(target, propertyKey) {
        Reflect.metadata(columnMetadataKey, { isColumn: true })(target);
        const designType = Reflect.getMetadata("design:type", target, propertyKey);
        const isForeignKey = designType ? ["String", "Number", "Boolean"].includes(designType.name) === false : false;
        const columns = target.constructor.prototype.tableColumns || [];
        let name = propertyKey;
        // console.log('name: ', name);
        let primary = false;
        // console.log('options: ', options);
        if (options) {
            if (options.name !== undefined) {
                name = options.name;
            }
            primary = options.primary === true;
        }
        columns.push({ name, primary, propertyKey, isForeignKey, designType });
        target.constructor.prototype.tableColumns = columns;
    }
    return registerColumn;
}
function getColumnInformation(target, propertyKey) {
    const properties = getColumnProperties(target);
    const property = properties.find((i) => i.propertyKey === propertyKey);
    if (!property) {
        const fkObject = properties.find((p) => p.name === propertyKey);
        if (typeof (fkObject === null || fkObject === void 0 ? void 0 : fkObject.designType) === "function") {
            throw new Error(
                `It seems that class "${target.name}" only has a foreign key object "${fkObject.propertyKey}", but is missing the foreign key property "${propertyKey}". Try adding "@column() ${propertyKey} : [correct type]" to class "${target.name}"`
            );
        }
        throw new Error(`Cannot get column data. Did you set @Column() attribute on ${target.name}.${propertyKey}?`);
    }
    return {
        columnClass: Reflect.getMetadata("design:type", target.prototype, propertyKey),
        name: property.name,
        primary: property.primary,
        propertyKey: property.propertyKey,
        designType: property.designType,
        isForeignKey: property.isForeignKey,
    };
}
exports.getColumnInformation = getColumnInformation;
function getColumnProperties(tableClass) {
    const columns = tableClass.prototype.tableColumns;
    if (!columns) {
        throw new Error(`Cannot get column data from ${tableClass.constructor.name}, did you set @Column() attribute?`);
    }
    return columns;
}
exports.getColumnProperties = getColumnProperties;
/**
 * @deprecated
 */
function getPrimaryKeyColumn(tableClass) {
    const columns = tableClass.prototype.tableColumns;
    if (!columns) {
        throw new Error(`Cannot get column data from ${tableClass.constructor.name}, did you set @Column() attribute?`);
    }
    const primaryKeyColumn = columns.find((i) => i.primary);
    if (primaryKeyColumn === undefined) {
        throw new Error(`Cannot get primary key column ${tableClass.constructor.name}, did you set @Column({primary:true}) attribute?`);
    }
    return primaryKeyColumn;
}
exports.getPrimaryKeyColumn = getPrimaryKeyColumn;
//# sourceMappingURL=data:application/json;base64,
